commonBuild: &commonBuild
  script:
    - apt-get update && apt-get install -y unzip   nodejs npm librdkafka-dev
    - pecl install swoole
    - pecl install rdkafka
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - docker-php-ext-install pcntl
    - echo "extension=swoole.so" > /usr/local/etc/php/conf.d/docker-php-swoole.ini
    - echo "extension=rdkafka.so" > /usr/local/etc/php/conf.d/docker-php-rdkafka.ini
    - composer install 
    - cp .env.pipeline .env
    - php artisan key:generate
    - php artisan view:clear
    - php artisan cache:clear
    - npm install
    - npm run dev
  artifacts:
    - storage/**
    - vendor/**
    - public/**
    - node_modules/**
    - .env
  services:
    - postgres

commonUnittest: &commonUnittest
  script:
    - apt-get update && apt-get install -y libmcrypt-dev   libpq-dev postgresql-client librdkafka-dev
    - pecl install swoole
    - pecl install rdkafka
    - echo "extension=swoole.so" > /usr/local/etc/php/conf.d/docker-php-swoole.ini
    - echo "extension=rdkafka.so" > /usr/local/etc/php/conf.d/docker-php-rdkafka.ini
    - docker-php-ext-install pdo pdo_pgsql pcntl
    - psql -U "postgres" -h "localhost"  -p 5432 -c "CREATE DATABASE test_crm"
    - php artisan migrate
    - php artisan passport:install
    - ./vendor/bin/phpunit
  services:
    - postgres

image: php:7.2-fpm
pipelines:
  branches:
    aws-deployment: 
    - step:
        name: Develop
        script:
          - echo "test"
        <<: *commonBuild
    - step:
        name: Unit test
        script:
          - echo "test"  
        <<: *commonUnittest
    - step:
        name: Deploy to develop
        script:
          - apt-get update && apt-get install -y openssh-client
          - mkdir -p ~/.ssh
          - cat .uat_host >> ~/.ssh/known_hosts
          - (umask  077 ; echo $awskey | base64 --decode > ~/.ssh/id_rsa)
          
          - ssh $awsuser@9pineuat.com 'bash -i  "compile.sh"'      
 


definitions:
      services:
        postgres:
            image: postgres
            environment:
                POSTGRES_USER: 'postgres'
                POSTGRES_PASSWORD: 'testuser'
                POSTGRES_DB: 'test'        