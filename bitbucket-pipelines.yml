# This is a sample build configuration for Other.
# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
commonStep: &commonStep
  step:
    script:
      - apt-get update && apt-get install -y unzip   nodejs npm librdkafka-dev
      - pecl install swoole
      - pecl install rdkafka
      - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
      - docker-php-ext-install pcntl
    # -docker-php-ext-install pdo pdo_pgsql  pcntl
    # -psql -U "postgres" -h "localhost"  -p 5432 -c "CREATE DATABASE test_crm"
      - echo "extension=swoole.so" > /usr/local/etc/php/conf.d/docker-php-swoole.ini
      - echo "extension=rdkafka.so" > /usr/local/etc/php/conf.d/docker-php-rdkafka.ini
      - composer install 
      - cp .env.pipeline .env
      - php artisan key:generate
      - php artisan view:clear
      - php artisan cache:clear
      - npm install
      - npm run dev
    artifacts:
      - storage/**
      - vendor/**
      - public/**
      - node_modules# This is a sample build configuration for Other.
# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: php:7.2-fpm

pipelines:
  default:
      - step: &run_bundle
        caches:
          - composer
        script:
          - apt-get update && apt-get install -y unzip   nodejs npm librdkafka-dev
          - pecl install swoole
          - pecl install rdkafka
          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
          - docker-php-ext-install pcntl
        # -docker-php-ext-install pdo pdo_pgsql  pcntl
        # -psql -U "postgres" -h "localhost"  -p 5432 -c "CREATE DATABASE test_crm"
          - echo "extension=swoole.so" > /usr/local/etc/php/conf.d/docker-php-swoole.ini
          - echo "extension=rdkafka.so" > /usr/local/etc/php/conf.d/docker-php-rdkafka.ini
          - composer install 
          - cp .env.pipeline .env
          - php artisan key:generate
          - php artisan view:clear
          - php artisan cache:clear
          - npm install
          - npm run dev
        artifacts:
          - storage/**
          - vendor/**
          - public/**
          - node_modules/**
          - .env
        services:
          - postgres
  branches:
    aws-deployment:
    - step:
        name: Develop

      <<: *run_bundle
        
    - step:
        name: Unit test
        script:
          - apt-get update && apt-get install -y libmcrypt-dev   libpq-dev postgresql-client librdkafka-dev
          - pecl install swoole
          - pecl install rdkafka
          - echo "extension=swoole.so" > /usr/local/etc/php/conf.d/docker-php-swoole.ini
          - echo "extension=rdkafka.so" > /usr/local/etc/php/conf.d/docker-php-rdkafka.ini
          - docker-php-ext-install pdo pdo_pgsql pcntl
          - psql -U "postgres" -h "localhost"  -p 5432 -c "CREATE DATABASE test_crm"
          - php artisan migrate
          - php artisan passport:install
          - ./vendor/bin/phpunit
        services:
          - postgres
    - step:
        name: Deploy to develop
        script:
          - apt-get update && apt-get install -y openssh-client
          - mkdir -p ~/.ssh
          - cat .develop_hosts >> ~/.ssh/known_hosts
          - (umask  077 ; echo $devkey2 | base64 --decode > ~/.ssh/id_rsa)
          
          - ssh $devuser36@ninepinetechnology-tmcrjvwbpr.dynamic-m.com -p 9913 'bash -i  "compile.sherror"'


definitions:
      services:
        postgres:
            image: postgres
            environment:
                POSTGRES_USER: 'postgres'
                POSTGRES_PASSWORD: 'testuser'
                POSTGRES_DB: 'test'/**
      - .env
    services:
      - postgres
  
image: php:7.2-fpm


pipelines:
  branches:
    aws-deployment:
    - step:
        name: Develop
        caches:
          - composer
        script:
          - echo "Lot's of code redundancy"
    - <<: *commonStep    
    - step:
        name: Deploy to develop
        script:
          - apt-get update && apt-get install -y openssh-client
          - mkdir -p ~/.ssh
          - cat .develop_hosts >> ~/.ssh/known_hosts
          - (umask  077 ; echo $devkey2 | base64 --decode > ~/.ssh/id_rsa)
          
          - ssh $devuser36@ninepinetechnology-tmcrjvwbpr.dynamic-m.com -p 9913 'bash -i  "compile.sherror"'


definitions:
      services:
        postgres:
            image: postgres
            environment:
                POSTGRES_USER: 'postgres'
                POSTGRES_PASSWORD: 'testuser'
                POSTGRES_DB: 'test'